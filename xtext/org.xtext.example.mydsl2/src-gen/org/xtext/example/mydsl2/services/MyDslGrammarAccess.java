/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl2.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFunctionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFunctionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFunctionFunctionParserRuleCall_3_2_0 = (RuleCall)cFunctionAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cFunctionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_3_3_1_0 = (RuleCall)cFunctionAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Robot returns Robot:
		//    {Robot}
		//    'Robot'
		//    '{'
		//        ('function' '{' function+=Function ( "," function+=Function)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot}
		//'Robot'
		//'{'
		//    ('function' '{' function+=Function ( "," function+=Function)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'Robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('function' '{' function+=Function ( "," function+=Function)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'function'
		public Keyword getFunctionKeyword_3_0() { return cFunctionKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//function+=Function
		public Assignment getFunctionAssignment_3_2() { return cFunctionAssignment_3_2; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_3_2_0() { return cFunctionFunctionParserRuleCall_3_2_0; }
		
		//( "," function+=Function)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//function+=Function
		public Assignment getFunctionAssignment_3_3_1() { return cFunctionAssignment_3_3_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_3_3_1_0() { return cFunctionFunctionParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRotateCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectionCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpeedCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDistanceSensorCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimeSensorCommandParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanExp_ImplParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPlusMinusParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cMultDivParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPrimaryExprAriParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDeclarationVariableParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLOOPParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIFParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cCallVariableParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cCallFunctionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cAffectationParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cPrimaryExprBoolParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cAndParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cOrParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cNotParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cEqualsParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cPlusMinusDistanceParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cMultDivDistanceParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cPrimaryExprDistanceParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cPlusMinusTimeParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cMultDiveTimeParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cPrimaryExprTimeParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cComparaisonDistanceParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cComparaisonTimeParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cComparaisonAriParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		
		//Instruction returns Instruction:
		//    RotateCommand | DirectionCommand | SpeedCommand | DistanceSensorCommand | TimeSensorCommand | BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | DeclarationVariable | LOOP | IF | CallVariable | CallFunction | Affectation | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri;
		@Override public ParserRule getRule() { return rule; }
		
		//RotateCommand | DirectionCommand | SpeedCommand | DistanceSensorCommand | TimeSensorCommand | BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | DeclarationVariable | LOOP | IF | CallVariable | CallFunction | Affectation | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RotateCommand
		public RuleCall getRotateCommandParserRuleCall_0() { return cRotateCommandParserRuleCall_0; }
		
		//DirectionCommand
		public RuleCall getDirectionCommandParserRuleCall_1() { return cDirectionCommandParserRuleCall_1; }
		
		//SpeedCommand
		public RuleCall getSpeedCommandParserRuleCall_2() { return cSpeedCommandParserRuleCall_2; }
		
		//DistanceSensorCommand
		public RuleCall getDistanceSensorCommandParserRuleCall_3() { return cDistanceSensorCommandParserRuleCall_3; }
		
		//TimeSensorCommand
		public RuleCall getTimeSensorCommandParserRuleCall_4() { return cTimeSensorCommandParserRuleCall_4; }
		
		//BooleanExp_Impl
		public RuleCall getBooleanExp_ImplParserRuleCall_5() { return cBooleanExp_ImplParserRuleCall_5; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall_6() { return cPlusMinusParserRuleCall_6; }
		
		//MultDiv
		public RuleCall getMultDivParserRuleCall_7() { return cMultDivParserRuleCall_7; }
		
		//PrimaryExprAri
		public RuleCall getPrimaryExprAriParserRuleCall_8() { return cPrimaryExprAriParserRuleCall_8; }
		
		//DeclarationVariable
		public RuleCall getDeclarationVariableParserRuleCall_9() { return cDeclarationVariableParserRuleCall_9; }
		
		//LOOP
		public RuleCall getLOOPParserRuleCall_10() { return cLOOPParserRuleCall_10; }
		
		//IF
		public RuleCall getIFParserRuleCall_11() { return cIFParserRuleCall_11; }
		
		//CallVariable
		public RuleCall getCallVariableParserRuleCall_12() { return cCallVariableParserRuleCall_12; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_13() { return cCallFunctionParserRuleCall_13; }
		
		//Affectation
		public RuleCall getAffectationParserRuleCall_14() { return cAffectationParserRuleCall_14; }
		
		//PrimaryExprBool
		public RuleCall getPrimaryExprBoolParserRuleCall_15() { return cPrimaryExprBoolParserRuleCall_15; }
		
		//And
		public RuleCall getAndParserRuleCall_16() { return cAndParserRuleCall_16; }
		
		//Or
		public RuleCall getOrParserRuleCall_17() { return cOrParserRuleCall_17; }
		
		//Not
		public RuleCall getNotParserRuleCall_18() { return cNotParserRuleCall_18; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_19() { return cEqualsParserRuleCall_19; }
		
		//PlusMinusDistance
		public RuleCall getPlusMinusDistanceParserRuleCall_20() { return cPlusMinusDistanceParserRuleCall_20; }
		
		//MultDivDistance
		public RuleCall getMultDivDistanceParserRuleCall_21() { return cMultDivDistanceParserRuleCall_21; }
		
		//PrimaryExprDistance
		public RuleCall getPrimaryExprDistanceParserRuleCall_22() { return cPrimaryExprDistanceParserRuleCall_22; }
		
		//PlusMinusTime
		public RuleCall getPlusMinusTimeParserRuleCall_23() { return cPlusMinusTimeParserRuleCall_23; }
		
		//MultDiveTime
		public RuleCall getMultDiveTimeParserRuleCall_24() { return cMultDiveTimeParserRuleCall_24; }
		
		//PrimaryExprTime
		public RuleCall getPrimaryExprTimeParserRuleCall_25() { return cPrimaryExprTimeParserRuleCall_25; }
		
		//ComparaisonDistance
		public RuleCall getComparaisonDistanceParserRuleCall_26() { return cComparaisonDistanceParserRuleCall_26; }
		
		//ComparaisonTime
		public RuleCall getComparaisonTimeParserRuleCall_27() { return cComparaisonTimeParserRuleCall_27; }
		
		//ComparaisonAri
		public RuleCall getComparaisonAriParserRuleCall_28() { return cComparaisonAriParserRuleCall_28; }
	}
	public class TypeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.TypeClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMmParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TypeClass returns TypeClass:
		//    CM | mm | BooleanType | NumberType | Time;
		@Override public ParserRule getRule() { return rule; }
		
		//CM | mm | BooleanType | NumberType | Time
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CM
		public RuleCall getCMParserRuleCall_0() { return cCMParserRuleCall_0; }
		
		//mm
		public RuleCall getMmParserRuleCall_1() { return cMmParserRuleCall_1; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }
		
		//NumberType
		public RuleCall getNumberTypeParserRuleCall_3() { return cNumberTypeParserRuleCall_3; }
		
		//Time
		public RuleCall getTimeParserRuleCall_4() { return cTimeParserRuleCall_4; }
	}
	public class DistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Distance");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMmParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Distance returns Distance:
		//    CM | mm;
		@Override public ParserRule getRule() { return rule; }
		
		//CM | mm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CM
		public RuleCall getCMParserRuleCall_0() { return cCMParserRuleCall_0; }
		
		//mm
		public RuleCall getMmParserRuleCall_1() { return cMmParserRuleCall_1; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Call returns Call:
		//    CallVariable | CallFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//CallVariable | CallFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CallVariable
		public RuleCall getCallVariableParserRuleCall_0() { return cCallVariableParserRuleCall_0; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_1() { return cCallFunctionParserRuleCall_1; }
	}
	public class ExpressionBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.ExpressionBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExp_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlusMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultDivParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryExprAriParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCallVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCallFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAffectationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPrimaryExprBoolParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAndParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOrParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNotParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cEqualsParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cPlusMinusDistanceParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cMultDivDistanceParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPrimaryExprDistanceParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cPlusMinusTimeParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cMultDiveTimeParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cPrimaryExprTimeParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cComparaisonDistanceParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cComparaisonTimeParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cComparaisonAriParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		
		//ExpressionBase returns ExpressionBase:
		//    BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | CallVariable | CallFunction | Affectation | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | CallVariable | CallFunction | Affectation | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanExp_Impl
		public RuleCall getBooleanExp_ImplParserRuleCall_0() { return cBooleanExp_ImplParserRuleCall_0; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall_1() { return cPlusMinusParserRuleCall_1; }
		
		//MultDiv
		public RuleCall getMultDivParserRuleCall_2() { return cMultDivParserRuleCall_2; }
		
		//PrimaryExprAri
		public RuleCall getPrimaryExprAriParserRuleCall_3() { return cPrimaryExprAriParserRuleCall_3; }
		
		//CallVariable
		public RuleCall getCallVariableParserRuleCall_4() { return cCallVariableParserRuleCall_4; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_5() { return cCallFunctionParserRuleCall_5; }
		
		//Affectation
		public RuleCall getAffectationParserRuleCall_6() { return cAffectationParserRuleCall_6; }
		
		//PrimaryExprBool
		public RuleCall getPrimaryExprBoolParserRuleCall_7() { return cPrimaryExprBoolParserRuleCall_7; }
		
		//And
		public RuleCall getAndParserRuleCall_8() { return cAndParserRuleCall_8; }
		
		//Or
		public RuleCall getOrParserRuleCall_9() { return cOrParserRuleCall_9; }
		
		//Not
		public RuleCall getNotParserRuleCall_10() { return cNotParserRuleCall_10; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_11() { return cEqualsParserRuleCall_11; }
		
		//PlusMinusDistance
		public RuleCall getPlusMinusDistanceParserRuleCall_12() { return cPlusMinusDistanceParserRuleCall_12; }
		
		//MultDivDistance
		public RuleCall getMultDivDistanceParserRuleCall_13() { return cMultDivDistanceParserRuleCall_13; }
		
		//PrimaryExprDistance
		public RuleCall getPrimaryExprDistanceParserRuleCall_14() { return cPrimaryExprDistanceParserRuleCall_14; }
		
		//PlusMinusTime
		public RuleCall getPlusMinusTimeParserRuleCall_15() { return cPlusMinusTimeParserRuleCall_15; }
		
		//MultDiveTime
		public RuleCall getMultDiveTimeParserRuleCall_16() { return cMultDiveTimeParserRuleCall_16; }
		
		//PrimaryExprTime
		public RuleCall getPrimaryExprTimeParserRuleCall_17() { return cPrimaryExprTimeParserRuleCall_17; }
		
		//ComparaisonDistance
		public RuleCall getComparaisonDistanceParserRuleCall_18() { return cComparaisonDistanceParserRuleCall_18; }
		
		//ComparaisonTime
		public RuleCall getComparaisonTimeParserRuleCall_19() { return cComparaisonTimeParserRuleCall_19; }
		
		//ComparaisonAri
		public RuleCall getComparaisonAriParserRuleCall_20() { return cComparaisonAriParserRuleCall_20; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExp_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlusMinusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMultDivParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryExprAriParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPrimaryExprBoolParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAndParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOrParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNotParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEqualsParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cPlusMinusDistanceParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMultDivDistanceParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPrimaryExprDistanceParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cPlusMinusTimeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cMultDiveTimeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPrimaryExprTimeParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cComparaisonDistanceParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cComparaisonTimeParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cComparaisonAriParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		//Expression returns Expression:
		//    BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanExp_Impl
		public RuleCall getBooleanExp_ImplParserRuleCall_0() { return cBooleanExp_ImplParserRuleCall_0; }
		
		//PlusMinus
		public RuleCall getPlusMinusParserRuleCall_1() { return cPlusMinusParserRuleCall_1; }
		
		//MultDiv
		public RuleCall getMultDivParserRuleCall_2() { return cMultDivParserRuleCall_2; }
		
		//PrimaryExprAri
		public RuleCall getPrimaryExprAriParserRuleCall_3() { return cPrimaryExprAriParserRuleCall_3; }
		
		//PrimaryExprBool
		public RuleCall getPrimaryExprBoolParserRuleCall_4() { return cPrimaryExprBoolParserRuleCall_4; }
		
		//And
		public RuleCall getAndParserRuleCall_5() { return cAndParserRuleCall_5; }
		
		//Or
		public RuleCall getOrParserRuleCall_6() { return cOrParserRuleCall_6; }
		
		//Not
		public RuleCall getNotParserRuleCall_7() { return cNotParserRuleCall_7; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_8() { return cEqualsParserRuleCall_8; }
		
		//PlusMinusDistance
		public RuleCall getPlusMinusDistanceParserRuleCall_9() { return cPlusMinusDistanceParserRuleCall_9; }
		
		//MultDivDistance
		public RuleCall getMultDivDistanceParserRuleCall_10() { return cMultDivDistanceParserRuleCall_10; }
		
		//PrimaryExprDistance
		public RuleCall getPrimaryExprDistanceParserRuleCall_11() { return cPrimaryExprDistanceParserRuleCall_11; }
		
		//PlusMinusTime
		public RuleCall getPlusMinusTimeParserRuleCall_12() { return cPlusMinusTimeParserRuleCall_12; }
		
		//MultDiveTime
		public RuleCall getMultDiveTimeParserRuleCall_13() { return cMultDiveTimeParserRuleCall_13; }
		
		//PrimaryExprTime
		public RuleCall getPrimaryExprTimeParserRuleCall_14() { return cPrimaryExprTimeParserRuleCall_14; }
		
		//ComparaisonDistance
		public RuleCall getComparaisonDistanceParserRuleCall_15() { return cComparaisonDistanceParserRuleCall_15; }
		
		//ComparaisonTime
		public RuleCall getComparaisonTimeParserRuleCall_16() { return cComparaisonTimeParserRuleCall_16; }
		
		//ComparaisonAri
		public RuleCall getComparaisonAriParserRuleCall_17() { return cComparaisonAriParserRuleCall_17; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInstructionKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInstructionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInstructionInstructionParserRuleCall_3_2_0 = (RuleCall)cInstructionAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cInstructionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_3_3_1_0 = (RuleCall)cInstructionAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersTypeClassParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersTypeClassParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeClassParserRuleCall_5_1_0 = (RuleCall)cReturnAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Function returns Function:
		//    {Function}
		//    'Function'
		//    '{'
		//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//        ('parameters' '{' parameters+=TypeClass ( "," parameters+=TypeClass)* '}' )?
		//        ('return' return=TypeClass)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Function}
		//'Function'
		//'{'
		//    ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//    ('parameters' '{' parameters+=TypeClass ( "," parameters+=TypeClass)* '}' )?
		//    ('return' return=TypeClass)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//'Function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'instruction'
		public Keyword getInstructionKeyword_3_0() { return cInstructionKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_3_2() { return cInstructionAssignment_3_2; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_2_0() { return cInstructionInstructionParserRuleCall_3_2_0; }
		
		//( "," instruction+=Instruction)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_3_3_1() { return cInstructionAssignment_3_3_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_3_3_1_0() { return cInstructionInstructionParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('parameters' '{' parameters+=TypeClass ( "," parameters+=TypeClass)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//parameters+=TypeClass
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }
		
		//TypeClass
		public RuleCall getParametersTypeClassParserRuleCall_4_2_0() { return cParametersTypeClassParserRuleCall_4_2_0; }
		
		//( "," parameters+=TypeClass)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//parameters+=TypeClass
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }
		
		//TypeClass
		public RuleCall getParametersTypeClassParserRuleCall_4_3_1_0() { return cParametersTypeClassParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('return' return=TypeClass)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'return'
		public Keyword getReturnKeyword_5_0() { return cReturnKeyword_5_0; }
		
		//return=TypeClass
		public Assignment getReturnAssignment_5_1() { return cReturnAssignment_5_1; }
		
		//TypeClass
		public RuleCall getReturnTypeClassParserRuleCall_5_1_0() { return cReturnTypeClassParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RotateCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.RotateCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotateCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRotateCommandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAngleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAngleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAngleEDoubleParserRuleCall_3_1_0 = (RuleCall)cAngleAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RotateCommand returns RotateCommand:
		//    {RotateCommand}
		//    'RotateCommand'
		//    '{'
		//        ('angle' angle=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{RotateCommand}
		//'RotateCommand'
		//'{'
		//    ('angle' angle=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{RotateCommand}
		public Action getRotateCommandAction_0() { return cRotateCommandAction_0; }
		
		//'RotateCommand'
		public Keyword getRotateCommandKeyword_1() { return cRotateCommandKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('angle' angle=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'angle'
		public Keyword getAngleKeyword_3_0() { return cAngleKeyword_3_0; }
		
		//angle=EDouble
		public Assignment getAngleAssignment_3_1() { return cAngleAssignment_3_1; }
		
		//EDouble
		public RuleCall getAngleEDoubleParserRuleCall_3_1_0() { return cAngleEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DirectionCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.DirectionCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDirectionCommandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDistanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDistanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDistanceDistanceParserRuleCall_3_0 = (RuleCall)cDistanceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DirectionCommand returns DirectionCommand:
		//    'DirectionCommand'
		//    '{'
		//        'distance' distance=Distance
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DirectionCommand'
		//'{'
		//    'distance' distance=Distance
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DirectionCommand'
		public Keyword getDirectionCommandKeyword_0() { return cDirectionCommandKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'distance'
		public Keyword getDistanceKeyword_2() { return cDistanceKeyword_2; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_3() { return cDistanceAssignment_3; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_3_0() { return cDistanceDistanceParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SpeedCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.SpeedCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpeedCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpeedCommandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpeedKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSpeedAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSpeedEDoubleParserRuleCall_3_1_0 = (RuleCall)cSpeedAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SpeedCommand returns SpeedCommand:
		//    {SpeedCommand}
		//    'SpeedCommand'
		//    '{'
		//        ('speed' speed=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SpeedCommand}
		//'SpeedCommand'
		//'{'
		//    ('speed' speed=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{SpeedCommand}
		public Action getSpeedCommandAction_0() { return cSpeedCommandAction_0; }
		
		//'SpeedCommand'
		public Keyword getSpeedCommandKeyword_1() { return cSpeedCommandKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('speed' speed=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'speed'
		public Keyword getSpeedKeyword_3_0() { return cSpeedKeyword_3_0; }
		
		//speed=EDouble
		public Assignment getSpeedAssignment_3_1() { return cSpeedAssignment_3_1; }
		
		//EDouble
		public RuleCall getSpeedEDoubleParserRuleCall_3_1_0() { return cSpeedEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DistanceSensorCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.DistanceSensorCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDistanceSensorCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDistanceSensorCommandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DistanceSensorCommand returns DistanceSensorCommand:
		//    {DistanceSensorCommand}
		//    'DistanceSensorCommand'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{DistanceSensorCommand}
		//'DistanceSensorCommand'
		public Group getGroup() { return cGroup; }
		
		//{DistanceSensorCommand}
		public Action getDistanceSensorCommandAction_0() { return cDistanceSensorCommandAction_0; }
		
		//'DistanceSensorCommand'
		public Keyword getDistanceSensorCommandKeyword_1() { return cDistanceSensorCommandKeyword_1; }
	}
	public class TimeSensorCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.TimeSensorCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeSensorCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeSensorCommandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TimeSensorCommand returns TimeSensorCommand:
		//    {TimeSensorCommand}
		//    'TimeSensorCommand'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TimeSensorCommand}
		//'TimeSensorCommand'
		public Group getGroup() { return cGroup; }
		
		//{TimeSensorCommand}
		public Action getTimeSensorCommandAction_0() { return cTimeSensorCommandAction_0; }
		
		//'TimeSensorCommand'
		public Keyword getTimeSensorCommandKeyword_1() { return cTimeSensorCommandKeyword_1; }
	}
	public class BooleanExp_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.BooleanExp_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanExpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanExp_Impl returns BooleanExp:
		//    {BooleanExp}
		//    'BooleanExp'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanExp}
		//'BooleanExp'
		public Group getGroup() { return cGroup; }
		
		//{BooleanExp}
		public Action getBooleanExpAction_0() { return cBooleanExpAction_0; }
		
		//'BooleanExp'
		public Keyword getBooleanExpKeyword_1() { return cBooleanExpKeyword_1; }
	}
	public class PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusMinusAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PlusMinus returns PlusMinus:
		//    {PlusMinus}
		//    'PlusMinus'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PlusMinus}
		//'PlusMinus'
		public Group getGroup() { return cGroup; }
		
		//{PlusMinus}
		public Action getPlusMinusAction_0() { return cPlusMinusAction_0; }
		
		//'PlusMinus'
		public Keyword getPlusMinusKeyword_1() { return cPlusMinusKeyword_1; }
	}
	public class MultDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.MultDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultDivAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultDivKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MultDiv returns MultDiv:
		//    {MultDiv}
		//    'MultDiv'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MultDiv}
		//'MultDiv'
		public Group getGroup() { return cGroup; }
		
		//{MultDiv}
		public Action getMultDivAction_0() { return cMultDivAction_0; }
		
		//'MultDiv'
		public Keyword getMultDivKeyword_1() { return cMultDivKeyword_1; }
	}
	public class PrimaryExprAriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.PrimaryExprAri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExprAriAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryExprAriKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeClassParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCallKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCallAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_4_1_0 = (RuleCall)cCallAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrimaryExprAri returns PrimaryExprAri:
		//    {PrimaryExprAri}
		//    'PrimaryExprAri'
		//    '{'
		//        ('type' type=TypeClass)?
		//        ('call' call=Call)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExprAri}
		//'PrimaryExprAri'
		//'{'
		//    ('type' type=TypeClass)?
		//    ('call' call=Call)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExprAri}
		public Action getPrimaryExprAriAction_0() { return cPrimaryExprAriAction_0; }
		
		//'PrimaryExprAri'
		public Keyword getPrimaryExprAriKeyword_1() { return cPrimaryExprAriKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('type' type=TypeClass)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//type=TypeClass
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//TypeClass
		public RuleCall getTypeTypeClassParserRuleCall_3_1_0() { return cTypeTypeClassParserRuleCall_3_1_0; }
		
		//('call' call=Call)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'call'
		public Keyword getCallKeyword_4_0() { return cCallKeyword_4_0; }
		
		//call=Call
		public Assignment getCallAssignment_4_1() { return cCallAssignment_4_1; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_4_1_0() { return cCallCallParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DeclarationVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.DeclarationVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclarationVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNomKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNomAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNomEStringParserRuleCall_2_1_0 = (RuleCall)cNomAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExpressionbaseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionbaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionbaseExpressionBaseParserRuleCall_3_1_0 = (RuleCall)cExpressionbaseAssignment_3_1.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeClassParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DeclarationVariable returns DeclarationVariable:
		//    'DeclarationVariable'
		//    '{'
		//        ('nom' nom=EString)?
		//        ('expressionbase' expressionbase=ExpressionBase)?
		//        'type' type=TypeClass
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DeclarationVariable'
		//'{'
		//    ('nom' nom=EString)?
		//    ('expressionbase' expressionbase=ExpressionBase)?
		//    'type' type=TypeClass
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DeclarationVariable'
		public Keyword getDeclarationVariableKeyword_0() { return cDeclarationVariableKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('nom' nom=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'nom'
		public Keyword getNomKeyword_2_0() { return cNomKeyword_2_0; }
		
		//nom=EString
		public Assignment getNomAssignment_2_1() { return cNomAssignment_2_1; }
		
		//EString
		public RuleCall getNomEStringParserRuleCall_2_1_0() { return cNomEStringParserRuleCall_2_1_0; }
		
		//('expressionbase' expressionbase=ExpressionBase)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'expressionbase'
		public Keyword getExpressionbaseKeyword_3_0() { return cExpressionbaseKeyword_3_0; }
		
		//expressionbase=ExpressionBase
		public Assignment getExpressionbaseAssignment_3_1() { return cExpressionbaseAssignment_3_1; }
		
		//ExpressionBase
		public RuleCall getExpressionbaseExpressionBaseParserRuleCall_3_1_0() { return cExpressionbaseExpressionBaseParserRuleCall_3_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=TypeClass
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//TypeClass
		public RuleCall getTypeTypeClassParserRuleCall_5_0() { return cTypeTypeClassParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class LOOPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.LOOP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOOPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInstructionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cInstructionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cInstructionInstructionParserRuleCall_2_2_0 = (RuleCall)cInstructionAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cInstructionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_2_3_1_0 = (RuleCall)cInstructionAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LOOP returns LOOP:
		//    'LOOP'
		//    '{'
		//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'LOOP'
		//'{'
		//    ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'LOOP'
		public Keyword getLOOPKeyword_0() { return cLOOPKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'instruction'
		public Keyword getInstructionKeyword_2_0() { return cInstructionKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_2_2() { return cInstructionAssignment_2_2; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_2_2_0() { return cInstructionInstructionParserRuleCall_2_2_0; }
		
		//( "," instruction+=Instruction)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_2_3_1() { return cInstructionAssignment_2_3_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_2_3_1_0() { return cInstructionInstructionParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class IFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.IF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInstructionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cInstructionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cInstructionInstructionParserRuleCall_2_2_0 = (RuleCall)cInstructionAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cInstructionAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_2_3_1_0 = (RuleCall)cInstructionAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cExpressionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IF returns IF:
		//    'IF'
		//    '{'
		//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//        'expression' expression=Expression
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'IF'
		//'{'
		//    ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		//    'expression' expression=Expression
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'instruction'
		public Keyword getInstructionKeyword_2_0() { return cInstructionKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_2_2() { return cInstructionAssignment_2_2; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_2_2_0() { return cInstructionInstructionParserRuleCall_2_2_0; }
		
		//( "," instruction+=Instruction)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//instruction+=Instruction
		public Assignment getInstructionAssignment_2_3_1() { return cInstructionAssignment_2_3_1; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_2_3_1_0() { return cInstructionInstructionParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'expression'
		public Keyword getExpressionKeyword_3() { return cExpressionKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CallVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.CallVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallVariableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CallVariable returns CallVariable:
		//    {CallVariable}
		//    'CallVariable'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CallVariable}
		//'CallVariable'
		public Group getGroup() { return cGroup; }
		
		//{CallVariable}
		public Action getCallVariableAction_0() { return cCallVariableAction_0; }
		
		//'CallVariable'
		public Keyword getCallVariableKeyword_1() { return cCallVariableKeyword_1; }
	}
	public class CallFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.CallFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CallFunction returns CallFunction:
		//    {CallFunction}
		//    'CallFunction'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CallFunction}
		//'CallFunction'
		public Group getGroup() { return cGroup; }
		
		//{CallFunction}
		public Action getCallFunctionAction_0() { return cCallFunctionAction_0; }
		
		//'CallFunction'
		public Keyword getCallFunctionKeyword_1() { return cCallFunctionKeyword_1; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAffectationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionbaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionbaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionbaseExpressionBaseParserRuleCall_4_0 = (RuleCall)cExpressionbaseAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionbaseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionbaseExpressionBaseParserRuleCall_5_1_0 = (RuleCall)cExpressionbaseAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCallvariableKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCallvariableAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCallvariableCallVariableParserRuleCall_7_1_0 = (RuleCall)cCallvariableAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Affectation returns Affectation:
		//    'Affectation'
		//    '{'
		//        'expressionbase' '{' expressionbase+=ExpressionBase ( "," expressionbase+=ExpressionBase)* '}'
		//        ('callvariable' callvariable=CallVariable)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Affectation'
		//'{'
		//    'expressionbase' '{' expressionbase+=ExpressionBase ( "," expressionbase+=ExpressionBase)* '}'
		//    ('callvariable' callvariable=CallVariable)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Affectation'
		public Keyword getAffectationKeyword_0() { return cAffectationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expressionbase'
		public Keyword getExpressionbaseKeyword_2() { return cExpressionbaseKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expressionbase+=ExpressionBase
		public Assignment getExpressionbaseAssignment_4() { return cExpressionbaseAssignment_4; }
		
		//ExpressionBase
		public RuleCall getExpressionbaseExpressionBaseParserRuleCall_4_0() { return cExpressionbaseExpressionBaseParserRuleCall_4_0; }
		
		//( "," expressionbase+=ExpressionBase)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expressionbase+=ExpressionBase
		public Assignment getExpressionbaseAssignment_5_1() { return cExpressionbaseAssignment_5_1; }
		
		//ExpressionBase
		public RuleCall getExpressionbaseExpressionBaseParserRuleCall_5_1_0() { return cExpressionbaseExpressionBaseParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('callvariable' callvariable=CallVariable)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'callvariable'
		public Keyword getCallvariableKeyword_7_0() { return cCallvariableKeyword_7_0; }
		
		//callvariable=CallVariable
		public Assignment getCallvariableAssignment_7_1() { return cCallvariableAssignment_7_1; }
		
		//CallVariable
		public RuleCall getCallvariableCallVariableParserRuleCall_7_1_0() { return cCallvariableCallVariableParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PrimaryExprBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.PrimaryExprBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExprBoolAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryExprBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeClassParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCallKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCallAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_4_1_0 = (RuleCall)cCallAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrimaryExprBool returns PrimaryExprBool:
		//    {PrimaryExprBool}
		//    'PrimaryExprBool'
		//    '{'
		//        ('type' type=TypeClass)?
		//        ('call' call=Call)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExprBool}
		//'PrimaryExprBool'
		//'{'
		//    ('type' type=TypeClass)?
		//    ('call' call=Call)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExprBool}
		public Action getPrimaryExprBoolAction_0() { return cPrimaryExprBoolAction_0; }
		
		//'PrimaryExprBool'
		public Keyword getPrimaryExprBoolKeyword_1() { return cPrimaryExprBoolKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('type' type=TypeClass)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//type=TypeClass
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//TypeClass
		public RuleCall getTypeTypeClassParserRuleCall_3_1_0() { return cTypeTypeClassParserRuleCall_3_1_0; }
		
		//('call' call=Call)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'call'
		public Keyword getCallKeyword_4_0() { return cCallKeyword_4_0; }
		
		//call=Call
		public Assignment getCallAssignment_4_1() { return cCallAssignment_4_1; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_4_1_0() { return cCallCallParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//And returns And:
		//    {And}
		//    'And'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{And}
		//'And'
		public Group getGroup() { return cGroup; }
		
		//{And}
		public Action getAndAction_0() { return cAndAction_0; }
		
		//'And'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Or returns Or:
		//    {Or}
		//    'Or'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Or}
		//'Or'
		public Group getGroup() { return cGroup; }
		
		//{Or}
		public Action getOrAction_0() { return cOrAction_0; }
		
		//'Or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Not returns Not:
		//    {Not}
		//    'Not'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Not}
		//'Not'
		public Group getGroup() { return cGroup; }
		
		//{Not}
		public Action getNotAction_0() { return cNotAction_0; }
		
		//'Not'
		public Keyword getNotKeyword_1() { return cNotKeyword_1; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Equals returns Equals:
		//    {Equals}
		//    'Equals'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Equals}
		//'Equals'
		public Group getGroup() { return cGroup; }
		
		//{Equals}
		public Action getEqualsAction_0() { return cEqualsAction_0; }
		
		//'Equals'
		public Keyword getEqualsKeyword_1() { return cEqualsKeyword_1; }
	}
	public class PlusMinusDistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.PlusMinusDistance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusMinusDistanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusMinusDistanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PlusMinusDistance returns PlusMinusDistance:
		//    {PlusMinusDistance}
		//    'PlusMinusDistance'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PlusMinusDistance}
		//'PlusMinusDistance'
		public Group getGroup() { return cGroup; }
		
		//{PlusMinusDistance}
		public Action getPlusMinusDistanceAction_0() { return cPlusMinusDistanceAction_0; }
		
		//'PlusMinusDistance'
		public Keyword getPlusMinusDistanceKeyword_1() { return cPlusMinusDistanceKeyword_1; }
	}
	public class MultDivDistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.MultDivDistance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultDivDistanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultDivDistanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MultDivDistance returns MultDivDistance:
		//    {MultDivDistance}
		//    'MultDivDistance'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MultDivDistance}
		//'MultDivDistance'
		public Group getGroup() { return cGroup; }
		
		//{MultDivDistance}
		public Action getMultDivDistanceAction_0() { return cMultDivDistanceAction_0; }
		
		//'MultDivDistance'
		public Keyword getMultDivDistanceKeyword_1() { return cMultDivDistanceKeyword_1; }
	}
	public class PrimaryExprDistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.PrimaryExprDistance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExprDistanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryExprDistanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDistanceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDistanceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDistanceDistanceParserRuleCall_3_1_0 = (RuleCall)cDistanceAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PrimaryExprDistance returns PrimaryExprDistance:
		//    {PrimaryExprDistance}
		//    'PrimaryExprDistance'
		//    '{'
		//        ('distance' distance=Distance)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExprDistance}
		//'PrimaryExprDistance'
		//'{'
		//    ('distance' distance=Distance)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExprDistance}
		public Action getPrimaryExprDistanceAction_0() { return cPrimaryExprDistanceAction_0; }
		
		//'PrimaryExprDistance'
		public Keyword getPrimaryExprDistanceKeyword_1() { return cPrimaryExprDistanceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('distance' distance=Distance)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'distance'
		public Keyword getDistanceKeyword_3_0() { return cDistanceKeyword_3_0; }
		
		//distance=Distance
		public Assignment getDistanceAssignment_3_1() { return cDistanceAssignment_3_1; }
		
		//Distance
		public RuleCall getDistanceDistanceParserRuleCall_3_1_0() { return cDistanceDistanceParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PlusMinusTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.PlusMinusTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusMinusTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlusMinusTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PlusMinusTime returns PlusMinusTime:
		//    {PlusMinusTime}
		//    'PlusMinusTime'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PlusMinusTime}
		//'PlusMinusTime'
		public Group getGroup() { return cGroup; }
		
		//{PlusMinusTime}
		public Action getPlusMinusTimeAction_0() { return cPlusMinusTimeAction_0; }
		
		//'PlusMinusTime'
		public Keyword getPlusMinusTimeKeyword_1() { return cPlusMinusTimeKeyword_1; }
	}
	public class MultDiveTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.MultDiveTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMultDiveTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMultDiveTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MultDiveTime returns MultDiveTime:
		//    {MultDiveTime}
		//    'MultDiveTime'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MultDiveTime}
		//'MultDiveTime'
		public Group getGroup() { return cGroup; }
		
		//{MultDiveTime}
		public Action getMultDiveTimeAction_0() { return cMultDiveTimeAction_0; }
		
		//'MultDiveTime'
		public Keyword getMultDiveTimeKeyword_1() { return cMultDiveTimeKeyword_1; }
	}
	public class PrimaryExprTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.PrimaryExprTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExprTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryExprTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTimeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTimeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeTimeParserRuleCall_3_1_0 = (RuleCall)cTimeAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PrimaryExprTime returns PrimaryExprTime:
		//    {PrimaryExprTime}
		//    'PrimaryExprTime'
		//    '{'
		//        ('time' time=Time)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExprTime}
		//'PrimaryExprTime'
		//'{'
		//    ('time' time=Time)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExprTime}
		public Action getPrimaryExprTimeAction_0() { return cPrimaryExprTimeAction_0; }
		
		//'PrimaryExprTime'
		public Keyword getPrimaryExprTimeKeyword_1() { return cPrimaryExprTimeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('time' time=Time)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'time'
		public Keyword getTimeKeyword_3_0() { return cTimeKeyword_3_0; }
		
		//time=Time
		public Assignment getTimeAssignment_3_1() { return cTimeAssignment_3_1; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_3_1_0() { return cTimeTimeParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComparaisonDistanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.ComparaisonDistance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComparaisonDistanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComparaisonDistanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ComparaisonDistance returns ComparaisonDistance:
		//    {ComparaisonDistance}
		//    'ComparaisonDistance'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComparaisonDistance}
		//'ComparaisonDistance'
		public Group getGroup() { return cGroup; }
		
		//{ComparaisonDistance}
		public Action getComparaisonDistanceAction_0() { return cComparaisonDistanceAction_0; }
		
		//'ComparaisonDistance'
		public Keyword getComparaisonDistanceKeyword_1() { return cComparaisonDistanceKeyword_1; }
	}
	public class ComparaisonTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.ComparaisonTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComparaisonTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComparaisonTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ComparaisonTime returns ComparaisonTime:
		//    {ComparaisonTime}
		//    'ComparaisonTime'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComparaisonTime}
		//'ComparaisonTime'
		public Group getGroup() { return cGroup; }
		
		//{ComparaisonTime}
		public Action getComparaisonTimeAction_0() { return cComparaisonTimeAction_0; }
		
		//'ComparaisonTime'
		public Keyword getComparaisonTimeKeyword_1() { return cComparaisonTimeKeyword_1; }
	}
	public class ComparaisonAriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.ComparaisonAri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComparaisonAriAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComparaisonAriKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ComparaisonAri returns ComparaisonAri:
		//    {ComparaisonAri}
		//    'ComparaisonAri'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ComparaisonAri}
		//'ComparaisonAri'
		public Group getGroup() { return cGroup; }
		
		//{ComparaisonAri}
		public Action getComparaisonAriAction_0() { return cComparaisonAriAction_0; }
		
		//'ComparaisonAri'
		public Keyword getComparaisonAriKeyword_1() { return cComparaisonAriKeyword_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class CMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.CM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCMAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDistanceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDistanceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDistanceEDoubleParserRuleCall_3_1_0 = (RuleCall)cDistanceAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CM returns CM:
		//    {CM}
		//    'CM'
		//    '{'
		//        ('distance' distance=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CM}
		//'CM'
		//'{'
		//    ('distance' distance=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{CM}
		public Action getCMAction_0() { return cCMAction_0; }
		
		//'CM'
		public Keyword getCMKeyword_1() { return cCMKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('distance' distance=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'distance'
		public Keyword getDistanceKeyword_3_0() { return cDistanceKeyword_3_0; }
		
		//distance=EDouble
		public Assignment getDistanceAssignment_3_1() { return cDistanceAssignment_3_1; }
		
		//EDouble
		public RuleCall getDistanceEDoubleParserRuleCall_3_1_0() { return cDistanceEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.mm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDistanceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDistanceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDistanceEDoubleParserRuleCall_3_1_0 = (RuleCall)cDistanceAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//mm returns mm:
		//    {mm}
		//    'mm'
		//    '{'
		//        ('distance' distance=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{mm}
		//'mm'
		//'{'
		//    ('distance' distance=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{mm}
		public Action getMmAction_0() { return cMmAction_0; }
		
		//'mm'
		public Keyword getMmKeyword_1() { return cMmKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('distance' distance=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'distance'
		public Keyword getDistanceKeyword_3_0() { return cDistanceKeyword_3_0; }
		
		//distance=EDouble
		public Assignment getDistanceAssignment_3_1() { return cDistanceAssignment_3_1; }
		
		//EDouble
		public RuleCall getDistanceEDoubleParserRuleCall_3_1_0() { return cDistanceEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTimeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTimeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Time returns Time:
		//    {Time}
		//    'Time'
		//    '{'
		//        ('value' value=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Time}
		//'Time'
		//'{'
		//    ('value' value=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Time}
		public Action getTimeAction_0() { return cTimeAction_0; }
		
		//'Time'
		public Keyword getTimeKeyword_1() { return cTimeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_3_1_0() { return cValueEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueValueKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Keyword cBooleanTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BooleanType returns BooleanType:
		//    {BooleanType}
		//    (value?='value')?
		//    'BooleanType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType}
		//(value?='value')?
		//'BooleanType'
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//(value?='value')?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'value'
		public Keyword getValueValueKeyword_1_0() { return cValueValueKeyword_1_0; }
		
		//'BooleanType'
		public Keyword getBooleanTypeKeyword_2() { return cBooleanTypeKeyword_2; }
	}
	public class NumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.NumberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NumberType returns NumberType:
		//    {NumberType}
		//    'NumberType'
		//    '{'
		//        ('value' value=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberType}
		//'NumberType'
		//'{'
		//    ('value' value=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{NumberType}
		public Action getNumberTypeAction_0() { return cNumberTypeAction_0; }
		
		//'NumberType'
		public Keyword getNumberTypeKeyword_1() { return cNumberTypeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_3_1_0() { return cValueEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl2.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final RobotElements pRobot;
	private final InstructionElements pInstruction;
	private final TypeClassElements pTypeClass;
	private final DistanceElements pDistance;
	private final CallElements pCall;
	private final ExpressionBaseElements pExpressionBase;
	private final ExpressionElements pExpression;
	private final FunctionElements pFunction;
	private final RotateCommandElements pRotateCommand;
	private final DirectionCommandElements pDirectionCommand;
	private final SpeedCommandElements pSpeedCommand;
	private final DistanceSensorCommandElements pDistanceSensorCommand;
	private final TimeSensorCommandElements pTimeSensorCommand;
	private final BooleanExp_ImplElements pBooleanExp_Impl;
	private final PlusMinusElements pPlusMinus;
	private final MultDivElements pMultDiv;
	private final PrimaryExprAriElements pPrimaryExprAri;
	private final DeclarationVariableElements pDeclarationVariable;
	private final LOOPElements pLOOP;
	private final IFElements pIF;
	private final CallVariableElements pCallVariable;
	private final CallFunctionElements pCallFunction;
	private final AffectationElements pAffectation;
	private final PrimaryExprBoolElements pPrimaryExprBool;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final NotElements pNot;
	private final EqualsElements pEquals;
	private final PlusMinusDistanceElements pPlusMinusDistance;
	private final MultDivDistanceElements pMultDivDistance;
	private final PrimaryExprDistanceElements pPrimaryExprDistance;
	private final PlusMinusTimeElements pPlusMinusTime;
	private final MultDiveTimeElements pMultDiveTime;
	private final PrimaryExprTimeElements pPrimaryExprTime;
	private final ComparaisonDistanceElements pComparaisonDistance;
	private final ComparaisonTimeElements pComparaisonTime;
	private final ComparaisonAriElements pComparaisonAri;
	private final EDoubleElements pEDouble;
	private final CMElements pCM;
	private final MmElements pMm;
	private final EStringElements pEString;
	private final TimeElements pTime;
	private final BooleanTypeElements pBooleanType;
	private final NumberTypeElements pNumberType;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pInstruction = new InstructionElements();
		this.pTypeClass = new TypeClassElements();
		this.pDistance = new DistanceElements();
		this.pCall = new CallElements();
		this.pExpressionBase = new ExpressionBaseElements();
		this.pExpression = new ExpressionElements();
		this.pFunction = new FunctionElements();
		this.pRotateCommand = new RotateCommandElements();
		this.pDirectionCommand = new DirectionCommandElements();
		this.pSpeedCommand = new SpeedCommandElements();
		this.pDistanceSensorCommand = new DistanceSensorCommandElements();
		this.pTimeSensorCommand = new TimeSensorCommandElements();
		this.pBooleanExp_Impl = new BooleanExp_ImplElements();
		this.pPlusMinus = new PlusMinusElements();
		this.pMultDiv = new MultDivElements();
		this.pPrimaryExprAri = new PrimaryExprAriElements();
		this.pDeclarationVariable = new DeclarationVariableElements();
		this.pLOOP = new LOOPElements();
		this.pIF = new IFElements();
		this.pCallVariable = new CallVariableElements();
		this.pCallFunction = new CallFunctionElements();
		this.pAffectation = new AffectationElements();
		this.pPrimaryExprBool = new PrimaryExprBoolElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pNot = new NotElements();
		this.pEquals = new EqualsElements();
		this.pPlusMinusDistance = new PlusMinusDistanceElements();
		this.pMultDivDistance = new MultDivDistanceElements();
		this.pPrimaryExprDistance = new PrimaryExprDistanceElements();
		this.pPlusMinusTime = new PlusMinusTimeElements();
		this.pMultDiveTime = new MultDiveTimeElements();
		this.pPrimaryExprTime = new PrimaryExprTimeElements();
		this.pComparaisonDistance = new ComparaisonDistanceElements();
		this.pComparaisonTime = new ComparaisonTimeElements();
		this.pComparaisonAri = new ComparaisonAriElements();
		this.pEDouble = new EDoubleElements();
		this.pCM = new CMElements();
		this.pMm = new MmElements();
		this.pEString = new EStringElements();
		this.pTime = new TimeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pNumberType = new NumberTypeElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl2.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot returns Robot:
	//    {Robot}
	//    'Robot'
	//    '{'
	//        ('function' '{' function+=Function ( "," function+=Function)* '}' )?
	//    '}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Instruction returns Instruction:
	//    RotateCommand | DirectionCommand | SpeedCommand | DistanceSensorCommand | TimeSensorCommand | BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | DeclarationVariable | LOOP | IF | CallVariable | CallFunction | Affectation | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//TypeClass returns TypeClass:
	//    CM | mm | BooleanType | NumberType | Time;
	public TypeClassElements getTypeClassAccess() {
		return pTypeClass;
	}
	
	public ParserRule getTypeClassRule() {
		return getTypeClassAccess().getRule();
	}
	
	//Distance returns Distance:
	//    CM | mm;
	public DistanceElements getDistanceAccess() {
		return pDistance;
	}
	
	public ParserRule getDistanceRule() {
		return getDistanceAccess().getRule();
	}
	
	//Call returns Call:
	//    CallVariable | CallFunction;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//ExpressionBase returns ExpressionBase:
	//    BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | CallVariable | CallFunction | Affectation | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri;
	public ExpressionBaseElements getExpressionBaseAccess() {
		return pExpressionBase;
	}
	
	public ParserRule getExpressionBaseRule() {
		return getExpressionBaseAccess().getRule();
	}
	
	//Expression returns Expression:
	//    BooleanExp_Impl | PlusMinus | MultDiv | PrimaryExprAri | PrimaryExprBool | And | Or | Not | Equals | PlusMinusDistance | MultDivDistance | PrimaryExprDistance | PlusMinusTime | MultDiveTime | PrimaryExprTime | ComparaisonDistance | ComparaisonTime | ComparaisonAri;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Function returns Function:
	//    {Function}
	//    'Function'
	//    '{'
	//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
	//        ('parameters' '{' parameters+=TypeClass ( "," parameters+=TypeClass)* '}' )?
	//        ('return' return=TypeClass)?
	//    '}';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//RotateCommand returns RotateCommand:
	//    {RotateCommand}
	//    'RotateCommand'
	//    '{'
	//        ('angle' angle=EDouble)?
	//    '}';
	public RotateCommandElements getRotateCommandAccess() {
		return pRotateCommand;
	}
	
	public ParserRule getRotateCommandRule() {
		return getRotateCommandAccess().getRule();
	}
	
	//DirectionCommand returns DirectionCommand:
	//    'DirectionCommand'
	//    '{'
	//        'distance' distance=Distance
	//    '}';
	public DirectionCommandElements getDirectionCommandAccess() {
		return pDirectionCommand;
	}
	
	public ParserRule getDirectionCommandRule() {
		return getDirectionCommandAccess().getRule();
	}
	
	//SpeedCommand returns SpeedCommand:
	//    {SpeedCommand}
	//    'SpeedCommand'
	//    '{'
	//        ('speed' speed=EDouble)?
	//    '}';
	public SpeedCommandElements getSpeedCommandAccess() {
		return pSpeedCommand;
	}
	
	public ParserRule getSpeedCommandRule() {
		return getSpeedCommandAccess().getRule();
	}
	
	//DistanceSensorCommand returns DistanceSensorCommand:
	//    {DistanceSensorCommand}
	//    'DistanceSensorCommand'
	//    ;
	public DistanceSensorCommandElements getDistanceSensorCommandAccess() {
		return pDistanceSensorCommand;
	}
	
	public ParserRule getDistanceSensorCommandRule() {
		return getDistanceSensorCommandAccess().getRule();
	}
	
	//TimeSensorCommand returns TimeSensorCommand:
	//    {TimeSensorCommand}
	//    'TimeSensorCommand'
	//    ;
	public TimeSensorCommandElements getTimeSensorCommandAccess() {
		return pTimeSensorCommand;
	}
	
	public ParserRule getTimeSensorCommandRule() {
		return getTimeSensorCommandAccess().getRule();
	}
	
	//BooleanExp_Impl returns BooleanExp:
	//    {BooleanExp}
	//    'BooleanExp'
	//    ;
	public BooleanExp_ImplElements getBooleanExp_ImplAccess() {
		return pBooleanExp_Impl;
	}
	
	public ParserRule getBooleanExp_ImplRule() {
		return getBooleanExp_ImplAccess().getRule();
	}
	
	//PlusMinus returns PlusMinus:
	//    {PlusMinus}
	//    'PlusMinus'
	//    ;
	public PlusMinusElements getPlusMinusAccess() {
		return pPlusMinus;
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}
	
	//MultDiv returns MultDiv:
	//    {MultDiv}
	//    'MultDiv'
	//    ;
	public MultDivElements getMultDivAccess() {
		return pMultDiv;
	}
	
	public ParserRule getMultDivRule() {
		return getMultDivAccess().getRule();
	}
	
	//PrimaryExprAri returns PrimaryExprAri:
	//    {PrimaryExprAri}
	//    'PrimaryExprAri'
	//    '{'
	//        ('type' type=TypeClass)?
	//        ('call' call=Call)?
	//    '}';
	public PrimaryExprAriElements getPrimaryExprAriAccess() {
		return pPrimaryExprAri;
	}
	
	public ParserRule getPrimaryExprAriRule() {
		return getPrimaryExprAriAccess().getRule();
	}
	
	//DeclarationVariable returns DeclarationVariable:
	//    'DeclarationVariable'
	//    '{'
	//        ('nom' nom=EString)?
	//        ('expressionbase' expressionbase=ExpressionBase)?
	//        'type' type=TypeClass
	//    '}';
	public DeclarationVariableElements getDeclarationVariableAccess() {
		return pDeclarationVariable;
	}
	
	public ParserRule getDeclarationVariableRule() {
		return getDeclarationVariableAccess().getRule();
	}
	
	//LOOP returns LOOP:
	//    'LOOP'
	//    '{'
	//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
	//        'expression' expression=Expression
	//    '}';
	public LOOPElements getLOOPAccess() {
		return pLOOP;
	}
	
	public ParserRule getLOOPRule() {
		return getLOOPAccess().getRule();
	}
	
	//IF returns IF:
	//    'IF'
	//    '{'
	//        ('instruction' '{' instruction+=Instruction ( "," instruction+=Instruction)* '}' )?
	//        'expression' expression=Expression
	//    '}';
	public IFElements getIFAccess() {
		return pIF;
	}
	
	public ParserRule getIFRule() {
		return getIFAccess().getRule();
	}
	
	//CallVariable returns CallVariable:
	//    {CallVariable}
	//    'CallVariable'
	//    ;
	public CallVariableElements getCallVariableAccess() {
		return pCallVariable;
	}
	
	public ParserRule getCallVariableRule() {
		return getCallVariableAccess().getRule();
	}
	
	//CallFunction returns CallFunction:
	//    {CallFunction}
	//    'CallFunction'
	//    ;
	public CallFunctionElements getCallFunctionAccess() {
		return pCallFunction;
	}
	
	public ParserRule getCallFunctionRule() {
		return getCallFunctionAccess().getRule();
	}
	
	//Affectation returns Affectation:
	//    'Affectation'
	//    '{'
	//        'expressionbase' '{' expressionbase+=ExpressionBase ( "," expressionbase+=ExpressionBase)* '}'
	//        ('callvariable' callvariable=CallVariable)?
	//    '}';
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//PrimaryExprBool returns PrimaryExprBool:
	//    {PrimaryExprBool}
	//    'PrimaryExprBool'
	//    '{'
	//        ('type' type=TypeClass)?
	//        ('call' call=Call)?
	//    '}';
	public PrimaryExprBoolElements getPrimaryExprBoolAccess() {
		return pPrimaryExprBool;
	}
	
	public ParserRule getPrimaryExprBoolRule() {
		return getPrimaryExprBoolAccess().getRule();
	}
	
	//And returns And:
	//    {And}
	//    'And'
	//    ;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Or returns Or:
	//    {Or}
	//    'Or'
	//    ;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Not returns Not:
	//    {Not}
	//    'Not'
	//    ;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Equals returns Equals:
	//    {Equals}
	//    'Equals'
	//    ;
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//PlusMinusDistance returns PlusMinusDistance:
	//    {PlusMinusDistance}
	//    'PlusMinusDistance'
	//    ;
	public PlusMinusDistanceElements getPlusMinusDistanceAccess() {
		return pPlusMinusDistance;
	}
	
	public ParserRule getPlusMinusDistanceRule() {
		return getPlusMinusDistanceAccess().getRule();
	}
	
	//MultDivDistance returns MultDivDistance:
	//    {MultDivDistance}
	//    'MultDivDistance'
	//    ;
	public MultDivDistanceElements getMultDivDistanceAccess() {
		return pMultDivDistance;
	}
	
	public ParserRule getMultDivDistanceRule() {
		return getMultDivDistanceAccess().getRule();
	}
	
	//PrimaryExprDistance returns PrimaryExprDistance:
	//    {PrimaryExprDistance}
	//    'PrimaryExprDistance'
	//    '{'
	//        ('distance' distance=Distance)?
	//    '}';
	public PrimaryExprDistanceElements getPrimaryExprDistanceAccess() {
		return pPrimaryExprDistance;
	}
	
	public ParserRule getPrimaryExprDistanceRule() {
		return getPrimaryExprDistanceAccess().getRule();
	}
	
	//PlusMinusTime returns PlusMinusTime:
	//    {PlusMinusTime}
	//    'PlusMinusTime'
	//    ;
	public PlusMinusTimeElements getPlusMinusTimeAccess() {
		return pPlusMinusTime;
	}
	
	public ParserRule getPlusMinusTimeRule() {
		return getPlusMinusTimeAccess().getRule();
	}
	
	//MultDiveTime returns MultDiveTime:
	//    {MultDiveTime}
	//    'MultDiveTime'
	//    ;
	public MultDiveTimeElements getMultDiveTimeAccess() {
		return pMultDiveTime;
	}
	
	public ParserRule getMultDiveTimeRule() {
		return getMultDiveTimeAccess().getRule();
	}
	
	//PrimaryExprTime returns PrimaryExprTime:
	//    {PrimaryExprTime}
	//    'PrimaryExprTime'
	//    '{'
	//        ('time' time=Time)?
	//    '}';
	public PrimaryExprTimeElements getPrimaryExprTimeAccess() {
		return pPrimaryExprTime;
	}
	
	public ParserRule getPrimaryExprTimeRule() {
		return getPrimaryExprTimeAccess().getRule();
	}
	
	//ComparaisonDistance returns ComparaisonDistance:
	//    {ComparaisonDistance}
	//    'ComparaisonDistance'
	//    ;
	public ComparaisonDistanceElements getComparaisonDistanceAccess() {
		return pComparaisonDistance;
	}
	
	public ParserRule getComparaisonDistanceRule() {
		return getComparaisonDistanceAccess().getRule();
	}
	
	//ComparaisonTime returns ComparaisonTime:
	//    {ComparaisonTime}
	//    'ComparaisonTime'
	//    ;
	public ComparaisonTimeElements getComparaisonTimeAccess() {
		return pComparaisonTime;
	}
	
	public ParserRule getComparaisonTimeRule() {
		return getComparaisonTimeAccess().getRule();
	}
	
	//ComparaisonAri returns ComparaisonAri:
	//    {ComparaisonAri}
	//    'ComparaisonAri'
	//    ;
	public ComparaisonAriElements getComparaisonAriAccess() {
		return pComparaisonAri;
	}
	
	public ParserRule getComparaisonAriRule() {
		return getComparaisonAriAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//CM returns CM:
	//    {CM}
	//    'CM'
	//    '{'
	//        ('distance' distance=EDouble)?
	//    '}';
	public CMElements getCMAccess() {
		return pCM;
	}
	
	public ParserRule getCMRule() {
		return getCMAccess().getRule();
	}
	
	//mm returns mm:
	//    {mm}
	//    'mm'
	//    '{'
	//        ('distance' distance=EDouble)?
	//    '}';
	public MmElements getMmAccess() {
		return pMm;
	}
	
	public ParserRule getMmRule() {
		return getMmAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Time returns Time:
	//    {Time}
	//    'Time'
	//    '{'
	//        ('value' value=EDouble)?
	//    '}';
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//BooleanType returns BooleanType:
	//    {BooleanType}
	//    (value?='value')?
	//    'BooleanType'
	//    ;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//NumberType returns NumberType:
	//    {NumberType}
	//    'NumberType'
	//    '{'
	//        ('value' value=EDouble)?
	//    '}';
	public NumberTypeElements getNumberTypeAccess() {
		return pNumberType;
	}
	
	public ParserRule getNumberTypeRule() {
		return getNumberTypeAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
