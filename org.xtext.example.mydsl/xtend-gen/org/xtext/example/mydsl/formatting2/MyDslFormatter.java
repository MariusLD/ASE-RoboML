/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import robot.Affectation;
import robot.ArithmetiqueExp;
import robot.CallVariable;
import robot.ExpressionBase;
import robot.Plus;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final Affectation affectation, @Extension final IFormattableDocument document) {
    EList<ExpressionBase> _expressionbase = affectation.getExpressionbase();
    for (final ExpressionBase expressionBase : _expressionbase) {
      document.<ExpressionBase>format(expressionBase);
    }
    document.<CallVariable>format(affectation.getCallvariable());
  }

  protected void _format(final Plus plus, @Extension final IFormattableDocument document) {
    EList<ArithmetiqueExp> _right = plus.getRight();
    for (final ArithmetiqueExp arithmetiqueExp : _right) {
      document.<ArithmetiqueExp>format(arithmetiqueExp);
    }
    document.<ArithmetiqueExp>format(plus.getLeft());
  }

  public void format(final Object plus, final IFormattableDocument document) {
    if (plus instanceof Plus) {
      _format((Plus)plus, document);
      return;
    } else if (plus instanceof XtextResource) {
      _format((XtextResource)plus, document);
      return;
    } else if (plus instanceof Affectation) {
      _format((Affectation)plus, document);
      return;
    } else if (plus instanceof EObject) {
      _format((EObject)plus, document);
      return;
    } else if (plus == null) {
      _format((Void)null, document);
      return;
    } else if (plus != null) {
      _format(plus, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(plus, document).toString());
    }
  }
}
