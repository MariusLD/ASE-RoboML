/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAffectationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExpressionbaseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionbaseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionbaseExpressionBaseParserRuleCall_4_0 = (RuleCall)cExpressionbaseAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionbaseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionbaseExpressionBaseParserRuleCall_5_1_0 = (RuleCall)cExpressionbaseAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCallvariableKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCallvariableAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCallvariableCallVariableParserRuleCall_7_1_0 = (RuleCall)cCallvariableAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Affectation returns Affectation:
		//    'Affectation'
		//    '{'
		//        'expressionbase' '{' expressionbase+=ExpressionBase ( "," expressionbase+=ExpressionBase)* '}'
		//        ('callvariable' callvariable=CallVariable)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Affectation'
		//'{'
		//    'expressionbase' '{' expressionbase+=ExpressionBase ( "," expressionbase+=ExpressionBase)* '}'
		//    ('callvariable' callvariable=CallVariable)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Affectation'
		public Keyword getAffectationKeyword_0() { return cAffectationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'expressionbase'
		public Keyword getExpressionbaseKeyword_2() { return cExpressionbaseKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expressionbase+=ExpressionBase
		public Assignment getExpressionbaseAssignment_4() { return cExpressionbaseAssignment_4; }
		
		//ExpressionBase
		public RuleCall getExpressionbaseExpressionBaseParserRuleCall_4_0() { return cExpressionbaseExpressionBaseParserRuleCall_4_0; }
		
		//( "," expressionbase+=ExpressionBase)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expressionbase+=ExpressionBase
		public Assignment getExpressionbaseAssignment_5_1() { return cExpressionbaseAssignment_5_1; }
		
		//ExpressionBase
		public RuleCall getExpressionbaseExpressionBaseParserRuleCall_5_1_0() { return cExpressionbaseExpressionBaseParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('callvariable' callvariable=CallVariable)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'callvariable'
		public Keyword getCallvariableKeyword_7_0() { return cCallvariableKeyword_7_0; }
		
		//callvariable=CallVariable
		public Assignment getCallvariableAssignment_7_1() { return cCallvariableAssignment_7_1; }
		
		//CallVariable
		public RuleCall getCallvariableCallVariableParserRuleCall_7_1_0() { return cCallvariableCallVariableParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ExpressionBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExpressionBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithmetiqueExp_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExp_ImplParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinusParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDivParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPrimaryExprAriParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSecondaryExpAri_ImplParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCallVariableParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCallFunctionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAffectationParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPrimaryExprBoolParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSecondaryExpBool_ImplParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cAndParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cOrParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cNotParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cEqualsParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//ExpressionBase returns ExpressionBase:
		//    ArithmetiqueExp_Impl | BooleanExp_Impl | Plus | Minus | Mult | Div | PrimaryExprAri | SecondaryExpAri_Impl | CallVariable | CallFunction | Affectation | PrimaryExprBool | SecondaryExpBool_Impl | And | Or | Not | Equals;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmetiqueExp_Impl | BooleanExp_Impl | Plus | Minus | Mult | Div | PrimaryExprAri | SecondaryExpAri_Impl | CallVariable | CallFunction | Affectation | PrimaryExprBool | SecondaryExpBool_Impl | And | Or | Not | Equals
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArithmetiqueExp_Impl
		public RuleCall getArithmetiqueExp_ImplParserRuleCall_0() { return cArithmetiqueExp_ImplParserRuleCall_0; }
		
		//BooleanExp_Impl
		public RuleCall getBooleanExp_ImplParserRuleCall_1() { return cBooleanExp_ImplParserRuleCall_1; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_2() { return cPlusParserRuleCall_2; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_3() { return cMinusParserRuleCall_3; }
		
		//Mult
		public RuleCall getMultParserRuleCall_4() { return cMultParserRuleCall_4; }
		
		//Div
		public RuleCall getDivParserRuleCall_5() { return cDivParserRuleCall_5; }
		
		//PrimaryExprAri
		public RuleCall getPrimaryExprAriParserRuleCall_6() { return cPrimaryExprAriParserRuleCall_6; }
		
		//SecondaryExpAri_Impl
		public RuleCall getSecondaryExpAri_ImplParserRuleCall_7() { return cSecondaryExpAri_ImplParserRuleCall_7; }
		
		//CallVariable
		public RuleCall getCallVariableParserRuleCall_8() { return cCallVariableParserRuleCall_8; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_9() { return cCallFunctionParserRuleCall_9; }
		
		//Affectation
		public RuleCall getAffectationParserRuleCall_10() { return cAffectationParserRuleCall_10; }
		
		//PrimaryExprBool
		public RuleCall getPrimaryExprBoolParserRuleCall_11() { return cPrimaryExprBoolParserRuleCall_11; }
		
		//SecondaryExpBool_Impl
		public RuleCall getSecondaryExpBool_ImplParserRuleCall_12() { return cSecondaryExpBool_ImplParserRuleCall_12; }
		
		//And
		public RuleCall getAndParserRuleCall_13() { return cAndParserRuleCall_13; }
		
		//Or
		public RuleCall getOrParserRuleCall_14() { return cOrParserRuleCall_14; }
		
		//Not
		public RuleCall getNotParserRuleCall_15() { return cNotParserRuleCall_15; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_16() { return cEqualsParserRuleCall_16; }
	}
	public class ArithmetiqueExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArithmetiqueExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithmetiqueExp_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMinusParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMultParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDivParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPrimaryExprAriParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSecondaryExpAri_ImplParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ArithmetiqueExp returns ArithmetiqueExp:
		//    ArithmetiqueExp_Impl | Plus | Minus | Mult | Div | PrimaryExprAri | SecondaryExpAri_Impl;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmetiqueExp_Impl | Plus | Minus | Mult | Div | PrimaryExprAri | SecondaryExpAri_Impl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArithmetiqueExp_Impl
		public RuleCall getArithmetiqueExp_ImplParserRuleCall_0() { return cArithmetiqueExp_ImplParserRuleCall_0; }
		
		//Plus
		public RuleCall getPlusParserRuleCall_1() { return cPlusParserRuleCall_1; }
		
		//Minus
		public RuleCall getMinusParserRuleCall_2() { return cMinusParserRuleCall_2; }
		
		//Mult
		public RuleCall getMultParserRuleCall_3() { return cMultParserRuleCall_3; }
		
		//Div
		public RuleCall getDivParserRuleCall_4() { return cDivParserRuleCall_4; }
		
		//PrimaryExprAri
		public RuleCall getPrimaryExprAriParserRuleCall_5() { return cPrimaryExprAriParserRuleCall_5; }
		
		//SecondaryExpAri_Impl
		public RuleCall getSecondaryExpAri_ImplParserRuleCall_6() { return cSecondaryExpAri_ImplParserRuleCall_6; }
	}
	public class TypeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TypeClass");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCMParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMmParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNumberTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TypeClass returns TypeClass:
		//    CM | mm | BooleanType | NumberType;
		@Override public ParserRule getRule() { return rule; }
		
		//CM | mm | BooleanType | NumberType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CM
		public RuleCall getCMParserRuleCall_0() { return cCMParserRuleCall_0; }
		
		//mm
		public RuleCall getMmParserRuleCall_1() { return cMmParserRuleCall_1; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }
		
		//NumberType
		public RuleCall getNumberTypeParserRuleCall_3() { return cNumberTypeParserRuleCall_3; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Call");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Call returns Call:
		//    CallVariable | CallFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//CallVariable | CallFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CallVariable
		public RuleCall getCallVariableParserRuleCall_0() { return cCallVariableParserRuleCall_0; }
		
		//CallFunction
		public RuleCall getCallFunctionParserRuleCall_1() { return cCallFunctionParserRuleCall_1; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BooleanExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExp_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryExprBoolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSecondaryExpBool_ImplParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOrParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNotParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEqualsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//BooleanExp returns BooleanExp:
		//    BooleanExp_Impl | PrimaryExprBool | SecondaryExpBool_Impl | And | Or | Not | Equals;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanExp_Impl | PrimaryExprBool | SecondaryExpBool_Impl | And | Or | Not | Equals
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanExp_Impl
		public RuleCall getBooleanExp_ImplParserRuleCall_0() { return cBooleanExp_ImplParserRuleCall_0; }
		
		//PrimaryExprBool
		public RuleCall getPrimaryExprBoolParserRuleCall_1() { return cPrimaryExprBoolParserRuleCall_1; }
		
		//SecondaryExpBool_Impl
		public RuleCall getSecondaryExpBool_ImplParserRuleCall_2() { return cSecondaryExpBool_ImplParserRuleCall_2; }
		
		//And
		public RuleCall getAndParserRuleCall_3() { return cAndParserRuleCall_3; }
		
		//Or
		public RuleCall getOrParserRuleCall_4() { return cOrParserRuleCall_4; }
		
		//Not
		public RuleCall getNotParserRuleCall_5() { return cNotParserRuleCall_5; }
		
		//Equals
		public RuleCall getEqualsParserRuleCall_6() { return cEqualsParserRuleCall_6; }
	}
	public class CallVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CallVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallVariableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CallVariable returns CallVariable:
		//    {CallVariable}
		//    'CallVariable'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CallVariable}
		//'CallVariable'
		public Group getGroup() { return cGroup; }
		
		//{CallVariable}
		public Action getCallVariableAction_0() { return cCallVariableAction_0; }
		
		//'CallVariable'
		public Keyword getCallVariableKeyword_1() { return cCallVariableKeyword_1; }
	}
	public class ArithmetiqueExp_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ArithmetiqueExp_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArithmetiqueExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArithmetiqueExpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ArithmetiqueExp_Impl returns ArithmetiqueExp:
		//    {ArithmetiqueExp}
		//    'ArithmetiqueExp'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ArithmetiqueExp}
		//'ArithmetiqueExp'
		public Group getGroup() { return cGroup; }
		
		//{ArithmetiqueExp}
		public Action getArithmetiqueExpAction_0() { return cArithmetiqueExpAction_0; }
		
		//'ArithmetiqueExp'
		public Keyword getArithmetiqueExpKeyword_1() { return cArithmetiqueExpKeyword_1; }
	}
	public class BooleanExp_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BooleanExp_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanExpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanExp_Impl returns BooleanExp:
		//    {BooleanExp}
		//    'BooleanExp'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanExp}
		//'BooleanExp'
		public Group getGroup() { return cGroup; }
		
		//{BooleanExp}
		public Action getBooleanExpAction_0() { return cBooleanExpAction_0; }
		
		//'BooleanExp'
		public Keyword getBooleanExpKeyword_1() { return cBooleanExpKeyword_1; }
	}
	public class PlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Plus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftArithmetiqueExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Plus returns Plus:
		//    'Plus'
		//    '{'
		//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//        'left' left=ArithmetiqueExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Plus'
		//'{'
		//    'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//    'left' left=ArithmetiqueExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Plus'
		public Keyword getPlusKeyword_0() { return cPlusKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_4_0() { return cRightArithmetiqueExpParserRuleCall_4_0; }
		
		//( "," right+=ArithmetiqueExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_5_1_0() { return cRightArithmetiqueExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=ArithmetiqueExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//ArithmetiqueExp
		public RuleCall getLeftArithmetiqueExpParserRuleCall_8_0() { return cLeftArithmetiqueExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Minus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftArithmetiqueExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Minus returns Minus:
		//    'Minus'
		//    '{'
		//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//        'left' left=ArithmetiqueExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Minus'
		//'{'
		//    'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//    'left' left=ArithmetiqueExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Minus'
		public Keyword getMinusKeyword_0() { return cMinusKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_4_0() { return cRightArithmetiqueExpParserRuleCall_4_0; }
		
		//( "," right+=ArithmetiqueExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_5_1_0() { return cRightArithmetiqueExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=ArithmetiqueExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//ArithmetiqueExp
		public RuleCall getLeftArithmetiqueExpParserRuleCall_8_0() { return cLeftArithmetiqueExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Mult");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftArithmetiqueExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Mult returns Mult:
		//    'Mult'
		//    '{'
		//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//        'left' left=ArithmetiqueExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mult'
		//'{'
		//    'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//    'left' left=ArithmetiqueExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mult'
		public Keyword getMultKeyword_0() { return cMultKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_4_0() { return cRightArithmetiqueExpParserRuleCall_4_0; }
		
		//( "," right+=ArithmetiqueExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_5_1_0() { return cRightArithmetiqueExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=ArithmetiqueExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//ArithmetiqueExp
		public RuleCall getLeftArithmetiqueExpParserRuleCall_8_0() { return cLeftArithmetiqueExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Div");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDivKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftArithmetiqueExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Div returns Div:
		//    'Div'
		//    '{'
		//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//        'left' left=ArithmetiqueExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Div'
		//'{'
		//    'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//    'left' left=ArithmetiqueExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Div'
		public Keyword getDivKeyword_0() { return cDivKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_4_0() { return cRightArithmetiqueExpParserRuleCall_4_0; }
		
		//( "," right+=ArithmetiqueExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_5_1_0() { return cRightArithmetiqueExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=ArithmetiqueExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//ArithmetiqueExp
		public RuleCall getLeftArithmetiqueExpParserRuleCall_8_0() { return cLeftArithmetiqueExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class PrimaryExprAriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprAri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExprAriAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryExprAriKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeClassParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCallKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCallAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_4_1_0 = (RuleCall)cCallAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrimaryExprAri returns PrimaryExprAri:
		//    {PrimaryExprAri}
		//    'PrimaryExprAri'
		//    '{'
		//        ('type' type=TypeClass)?
		//        ('call' call=Call)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExprAri}
		//'PrimaryExprAri'
		//'{'
		//    ('type' type=TypeClass)?
		//    ('call' call=Call)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExprAri}
		public Action getPrimaryExprAriAction_0() { return cPrimaryExprAriAction_0; }
		
		//'PrimaryExprAri'
		public Keyword getPrimaryExprAriKeyword_1() { return cPrimaryExprAriKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('type' type=TypeClass)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//type=TypeClass
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//TypeClass
		public RuleCall getTypeTypeClassParserRuleCall_3_1_0() { return cTypeTypeClassParserRuleCall_3_1_0; }
		
		//('call' call=Call)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'call'
		public Keyword getCallKeyword_4_0() { return cCallKeyword_4_0; }
		
		//call=Call
		public Assignment getCallAssignment_4_1() { return cCallAssignment_4_1; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_4_1_0() { return cCallCallParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SecondaryExpAri_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SecondaryExpAri_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSecondaryExpAriKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightArithmetiqueExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftArithmetiqueExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SecondaryExpAri_Impl returns SecondaryExpAri:
		//    'SecondaryExpAri'
		//    '{'
		//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//        'left' left=ArithmetiqueExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SecondaryExpAri'
		//'{'
		//    'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
		//    'left' left=ArithmetiqueExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SecondaryExpAri'
		public Keyword getSecondaryExpAriKeyword_0() { return cSecondaryExpAriKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_4_0() { return cRightArithmetiqueExpParserRuleCall_4_0; }
		
		//( "," right+=ArithmetiqueExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=ArithmetiqueExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//ArithmetiqueExp
		public RuleCall getRightArithmetiqueExpParserRuleCall_5_1_0() { return cRightArithmetiqueExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=ArithmetiqueExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//ArithmetiqueExp
		public RuleCall getLeftArithmetiqueExpParserRuleCall_8_0() { return cLeftArithmetiqueExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CallFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CallFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCallFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CallFunction returns CallFunction:
		//    {CallFunction}
		//    'CallFunction'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CallFunction}
		//'CallFunction'
		public Group getGroup() { return cGroup; }
		
		//{CallFunction}
		public Action getCallFunctionAction_0() { return cCallFunctionAction_0; }
		
		//'CallFunction'
		public Keyword getCallFunctionKeyword_1() { return cCallFunctionKeyword_1; }
	}
	public class PrimaryExprBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PrimaryExprBool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExprBoolAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimaryExprBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeClassParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCallKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCallAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_4_1_0 = (RuleCall)cCallAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrimaryExprBool returns PrimaryExprBool:
		//    {PrimaryExprBool}
		//    'PrimaryExprBool'
		//    '{'
		//        ('type' type=TypeClass)?
		//        ('call' call=Call)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExprBool}
		//'PrimaryExprBool'
		//'{'
		//    ('type' type=TypeClass)?
		//    ('call' call=Call)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExprBool}
		public Action getPrimaryExprBoolAction_0() { return cPrimaryExprBoolAction_0; }
		
		//'PrimaryExprBool'
		public Keyword getPrimaryExprBoolKeyword_1() { return cPrimaryExprBoolKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('type' type=TypeClass)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//type=TypeClass
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//TypeClass
		public RuleCall getTypeTypeClassParserRuleCall_3_1_0() { return cTypeTypeClassParserRuleCall_3_1_0; }
		
		//('call' call=Call)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'call'
		public Keyword getCallKeyword_4_0() { return cCallKeyword_4_0; }
		
		//call=Call
		public Assignment getCallAssignment_4_1() { return cCallAssignment_4_1; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_4_1_0() { return cCallCallParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SecondaryExpBool_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SecondaryExpBool_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSecondaryExpBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightBooleanExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightBooleanExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftBooleanExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SecondaryExpBool_Impl returns SecondaryExpBool:
		//    'SecondaryExpBool'
		//    '{'
		//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//        'left' left=BooleanExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SecondaryExpBool'
		//'{'
		//    'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//    'left' left=BooleanExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SecondaryExpBool'
		public Keyword getSecondaryExpBoolKeyword_0() { return cSecondaryExpBoolKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_4_0() { return cRightBooleanExpParserRuleCall_4_0; }
		
		//( "," right+=BooleanExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_5_1_0() { return cRightBooleanExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=BooleanExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//BooleanExp
		public RuleCall getLeftBooleanExpParserRuleCall_8_0() { return cLeftBooleanExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightBooleanExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightBooleanExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftBooleanExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//And returns And:
		//    'And'
		//    '{'
		//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//        'left' left=BooleanExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'And'
		//'{'
		//    'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//    'left' left=BooleanExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'And'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_4_0() { return cRightBooleanExpParserRuleCall_4_0; }
		
		//( "," right+=BooleanExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_5_1_0() { return cRightBooleanExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=BooleanExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//BooleanExp
		public RuleCall getLeftBooleanExpParserRuleCall_8_0() { return cLeftBooleanExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightBooleanExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightBooleanExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftBooleanExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Or returns Or:
		//    'Or'
		//    '{'
		//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//        'left' left=BooleanExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Or'
		//'{'
		//    'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//    'left' left=BooleanExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_4_0() { return cRightBooleanExpParserRuleCall_4_0; }
		
		//( "," right+=BooleanExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_5_1_0() { return cRightBooleanExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=BooleanExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//BooleanExp
		public RuleCall getLeftBooleanExpParserRuleCall_8_0() { return cLeftBooleanExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightBooleanExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightBooleanExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftBooleanExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Not returns Not:
		//    'Not'
		//    '{'
		//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//        'left' left=BooleanExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Not'
		//'{'
		//    'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//    'left' left=BooleanExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Not'
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_4_0() { return cRightBooleanExpParserRuleCall_4_0; }
		
		//( "," right+=BooleanExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_5_1_0() { return cRightBooleanExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=BooleanExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//BooleanExp
		public RuleCall getLeftBooleanExpParserRuleCall_8_0() { return cLeftBooleanExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Equals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightBooleanExpParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRightAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRightBooleanExpParserRuleCall_5_1_0 = (RuleCall)cRightAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLeftAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLeftBooleanExpParserRuleCall_8_0 = (RuleCall)cLeftAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Equals returns Equals:
		//    'Equals'
		//    '{'
		//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//        'left' left=BooleanExp
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Equals'
		//'{'
		//    'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
		//    'left' left=BooleanExp
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Equals'
		public Keyword getEqualsKeyword_0() { return cEqualsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'right'
		public Keyword getRightKeyword_2() { return cRightKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_4_0() { return cRightBooleanExpParserRuleCall_4_0; }
		
		//( "," right+=BooleanExp)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//right+=BooleanExp
		public Assignment getRightAssignment_5_1() { return cRightAssignment_5_1; }
		
		//BooleanExp
		public RuleCall getRightBooleanExpParserRuleCall_5_1_0() { return cRightBooleanExpParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'left'
		public Keyword getLeftKeyword_7() { return cLeftKeyword_7; }
		
		//left=BooleanExp
		public Assignment getLeftAssignment_8() { return cLeftAssignment_8; }
		
		//BooleanExp
		public RuleCall getLeftBooleanExpParserRuleCall_8_0() { return cLeftBooleanExpParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class CMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCMAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDistanceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDistanceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDistanceEDoubleParserRuleCall_3_1_0 = (RuleCall)cDistanceAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CM returns CM:
		//    {CM}
		//    'CM'
		//    '{'
		//        ('distance' distance=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{CM}
		//'CM'
		//'{'
		//    ('distance' distance=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{CM}
		public Action getCMAction_0() { return cCMAction_0; }
		
		//'CM'
		public Keyword getCMKeyword_1() { return cCMKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('distance' distance=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'distance'
		public Keyword getDistanceKeyword_3_0() { return cDistanceKeyword_3_0; }
		
		//distance=EDouble
		public Assignment getDistanceAssignment_3_1() { return cDistanceAssignment_3_1; }
		
		//EDouble
		public RuleCall getDistanceEDoubleParserRuleCall_3_1_0() { return cDistanceEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.mm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMmAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMmKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDistanceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDistanceAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDistanceEDoubleParserRuleCall_3_1_0 = (RuleCall)cDistanceAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//mm returns mm:
		//    {mm}
		//    'mm'
		//    '{'
		//        ('distance' distance=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{mm}
		//'mm'
		//'{'
		//    ('distance' distance=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{mm}
		public Action getMmAction_0() { return cMmAction_0; }
		
		//'mm'
		public Keyword getMmKeyword_1() { return cMmKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('distance' distance=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'distance'
		public Keyword getDistanceKeyword_3_0() { return cDistanceKeyword_3_0; }
		
		//distance=EDouble
		public Assignment getDistanceAssignment_3_1() { return cDistanceAssignment_3_1; }
		
		//EDouble
		public RuleCall getDistanceEDoubleParserRuleCall_3_1_0() { return cDistanceEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cValueValueKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Keyword cBooleanTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BooleanType returns BooleanType:
		//    {BooleanType}
		//    (value?='value')?
		//    'BooleanType'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType}
		//(value?='value')?
		//'BooleanType'
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//(value?='value')?
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//'value'
		public Keyword getValueValueKeyword_1_0() { return cValueValueKeyword_1_0; }
		
		//'BooleanType'
		public Keyword getBooleanTypeKeyword_2() { return cBooleanTypeKeyword_2; }
	}
	public class NumberTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NumberType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNumberTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NumberType returns NumberType:
		//    {NumberType}
		//    'NumberType'
		//    '{'
		//        ('value' value=EDouble)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{NumberType}
		//'NumberType'
		//'{'
		//    ('value' value=EDouble)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{NumberType}
		public Action getNumberTypeAction_0() { return cNumberTypeAction_0; }
		
		//'NumberType'
		public Keyword getNumberTypeKeyword_1() { return cNumberTypeKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=EDouble)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_3_1_0() { return cValueEDoubleParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final AffectationElements pAffectation;
	private final ExpressionBaseElements pExpressionBase;
	private final ArithmetiqueExpElements pArithmetiqueExp;
	private final TypeClassElements pTypeClass;
	private final CallElements pCall;
	private final BooleanExpElements pBooleanExp;
	private final CallVariableElements pCallVariable;
	private final ArithmetiqueExp_ImplElements pArithmetiqueExp_Impl;
	private final BooleanExp_ImplElements pBooleanExp_Impl;
	private final PlusElements pPlus;
	private final MinusElements pMinus;
	private final MultElements pMult;
	private final DivElements pDiv;
	private final PrimaryExprAriElements pPrimaryExprAri;
	private final SecondaryExpAri_ImplElements pSecondaryExpAri_Impl;
	private final CallFunctionElements pCallFunction;
	private final PrimaryExprBoolElements pPrimaryExprBool;
	private final SecondaryExpBool_ImplElements pSecondaryExpBool_Impl;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final NotElements pNot;
	private final EqualsElements pEquals;
	private final CMElements pCM;
	private final MmElements pMm;
	private final BooleanTypeElements pBooleanType;
	private final NumberTypeElements pNumberType;
	private final EDoubleElements pEDouble;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAffectation = new AffectationElements();
		this.pExpressionBase = new ExpressionBaseElements();
		this.pArithmetiqueExp = new ArithmetiqueExpElements();
		this.pTypeClass = new TypeClassElements();
		this.pCall = new CallElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pCallVariable = new CallVariableElements();
		this.pArithmetiqueExp_Impl = new ArithmetiqueExp_ImplElements();
		this.pBooleanExp_Impl = new BooleanExp_ImplElements();
		this.pPlus = new PlusElements();
		this.pMinus = new MinusElements();
		this.pMult = new MultElements();
		this.pDiv = new DivElements();
		this.pPrimaryExprAri = new PrimaryExprAriElements();
		this.pSecondaryExpAri_Impl = new SecondaryExpAri_ImplElements();
		this.pCallFunction = new CallFunctionElements();
		this.pPrimaryExprBool = new PrimaryExprBoolElements();
		this.pSecondaryExpBool_Impl = new SecondaryExpBool_ImplElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pNot = new NotElements();
		this.pEquals = new EqualsElements();
		this.pCM = new CMElements();
		this.pMm = new MmElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pNumberType = new NumberTypeElements();
		this.pEDouble = new EDoubleElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Affectation returns Affectation:
	//    'Affectation'
	//    '{'
	//        'expressionbase' '{' expressionbase+=ExpressionBase ( "," expressionbase+=ExpressionBase)* '}'
	//        ('callvariable' callvariable=CallVariable)?
	//    '}';
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//ExpressionBase returns ExpressionBase:
	//    ArithmetiqueExp_Impl | BooleanExp_Impl | Plus | Minus | Mult | Div | PrimaryExprAri | SecondaryExpAri_Impl | CallVariable | CallFunction | Affectation | PrimaryExprBool | SecondaryExpBool_Impl | And | Or | Not | Equals;
	public ExpressionBaseElements getExpressionBaseAccess() {
		return pExpressionBase;
	}
	
	public ParserRule getExpressionBaseRule() {
		return getExpressionBaseAccess().getRule();
	}
	
	//ArithmetiqueExp returns ArithmetiqueExp:
	//    ArithmetiqueExp_Impl | Plus | Minus | Mult | Div | PrimaryExprAri | SecondaryExpAri_Impl;
	public ArithmetiqueExpElements getArithmetiqueExpAccess() {
		return pArithmetiqueExp;
	}
	
	public ParserRule getArithmetiqueExpRule() {
		return getArithmetiqueExpAccess().getRule();
	}
	
	//TypeClass returns TypeClass:
	//    CM | mm | BooleanType | NumberType;
	public TypeClassElements getTypeClassAccess() {
		return pTypeClass;
	}
	
	public ParserRule getTypeClassRule() {
		return getTypeClassAccess().getRule();
	}
	
	//Call returns Call:
	//    CallVariable | CallFunction;
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//BooleanExp returns BooleanExp:
	//    BooleanExp_Impl | PrimaryExprBool | SecondaryExpBool_Impl | And | Or | Not | Equals;
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//CallVariable returns CallVariable:
	//    {CallVariable}
	//    'CallVariable'
	//    ;
	public CallVariableElements getCallVariableAccess() {
		return pCallVariable;
	}
	
	public ParserRule getCallVariableRule() {
		return getCallVariableAccess().getRule();
	}
	
	//ArithmetiqueExp_Impl returns ArithmetiqueExp:
	//    {ArithmetiqueExp}
	//    'ArithmetiqueExp'
	//    ;
	public ArithmetiqueExp_ImplElements getArithmetiqueExp_ImplAccess() {
		return pArithmetiqueExp_Impl;
	}
	
	public ParserRule getArithmetiqueExp_ImplRule() {
		return getArithmetiqueExp_ImplAccess().getRule();
	}
	
	//BooleanExp_Impl returns BooleanExp:
	//    {BooleanExp}
	//    'BooleanExp'
	//    ;
	public BooleanExp_ImplElements getBooleanExp_ImplAccess() {
		return pBooleanExp_Impl;
	}
	
	public ParserRule getBooleanExp_ImplRule() {
		return getBooleanExp_ImplAccess().getRule();
	}
	
	//Plus returns Plus:
	//    'Plus'
	//    '{'
	//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
	//        'left' left=ArithmetiqueExp
	//    '}';
	public PlusElements getPlusAccess() {
		return pPlus;
	}
	
	public ParserRule getPlusRule() {
		return getPlusAccess().getRule();
	}
	
	//Minus returns Minus:
	//    'Minus'
	//    '{'
	//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
	//        'left' left=ArithmetiqueExp
	//    '}';
	public MinusElements getMinusAccess() {
		return pMinus;
	}
	
	public ParserRule getMinusRule() {
		return getMinusAccess().getRule();
	}
	
	//Mult returns Mult:
	//    'Mult'
	//    '{'
	//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
	//        'left' left=ArithmetiqueExp
	//    '}';
	public MultElements getMultAccess() {
		return pMult;
	}
	
	public ParserRule getMultRule() {
		return getMultAccess().getRule();
	}
	
	//Div returns Div:
	//    'Div'
	//    '{'
	//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
	//        'left' left=ArithmetiqueExp
	//    '}';
	public DivElements getDivAccess() {
		return pDiv;
	}
	
	public ParserRule getDivRule() {
		return getDivAccess().getRule();
	}
	
	//PrimaryExprAri returns PrimaryExprAri:
	//    {PrimaryExprAri}
	//    'PrimaryExprAri'
	//    '{'
	//        ('type' type=TypeClass)?
	//        ('call' call=Call)?
	//    '}';
	public PrimaryExprAriElements getPrimaryExprAriAccess() {
		return pPrimaryExprAri;
	}
	
	public ParserRule getPrimaryExprAriRule() {
		return getPrimaryExprAriAccess().getRule();
	}
	
	//SecondaryExpAri_Impl returns SecondaryExpAri:
	//    'SecondaryExpAri'
	//    '{'
	//        'right' '{' right+=ArithmetiqueExp ( "," right+=ArithmetiqueExp)* '}'
	//        'left' left=ArithmetiqueExp
	//    '}';
	public SecondaryExpAri_ImplElements getSecondaryExpAri_ImplAccess() {
		return pSecondaryExpAri_Impl;
	}
	
	public ParserRule getSecondaryExpAri_ImplRule() {
		return getSecondaryExpAri_ImplAccess().getRule();
	}
	
	//CallFunction returns CallFunction:
	//    {CallFunction}
	//    'CallFunction'
	//    ;
	public CallFunctionElements getCallFunctionAccess() {
		return pCallFunction;
	}
	
	public ParserRule getCallFunctionRule() {
		return getCallFunctionAccess().getRule();
	}
	
	//PrimaryExprBool returns PrimaryExprBool:
	//    {PrimaryExprBool}
	//    'PrimaryExprBool'
	//    '{'
	//        ('type' type=TypeClass)?
	//        ('call' call=Call)?
	//    '}';
	public PrimaryExprBoolElements getPrimaryExprBoolAccess() {
		return pPrimaryExprBool;
	}
	
	public ParserRule getPrimaryExprBoolRule() {
		return getPrimaryExprBoolAccess().getRule();
	}
	
	//SecondaryExpBool_Impl returns SecondaryExpBool:
	//    'SecondaryExpBool'
	//    '{'
	//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
	//        'left' left=BooleanExp
	//    '}';
	public SecondaryExpBool_ImplElements getSecondaryExpBool_ImplAccess() {
		return pSecondaryExpBool_Impl;
	}
	
	public ParserRule getSecondaryExpBool_ImplRule() {
		return getSecondaryExpBool_ImplAccess().getRule();
	}
	
	//And returns And:
	//    'And'
	//    '{'
	//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
	//        'left' left=BooleanExp
	//    '}';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Or returns Or:
	//    'Or'
	//    '{'
	//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
	//        'left' left=BooleanExp
	//    '}';
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//Not returns Not:
	//    'Not'
	//    '{'
	//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
	//        'left' left=BooleanExp
	//    '}';
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Equals returns Equals:
	//    'Equals'
	//    '{'
	//        'right' '{' right+=BooleanExp ( "," right+=BooleanExp)* '}'
	//        'left' left=BooleanExp
	//    '}';
	public EqualsElements getEqualsAccess() {
		return pEquals;
	}
	
	public ParserRule getEqualsRule() {
		return getEqualsAccess().getRule();
	}
	
	//CM returns CM:
	//    {CM}
	//    'CM'
	//    '{'
	//        ('distance' distance=EDouble)?
	//    '}';
	public CMElements getCMAccess() {
		return pCM;
	}
	
	public ParserRule getCMRule() {
		return getCMAccess().getRule();
	}
	
	//mm returns mm:
	//    {mm}
	//    'mm'
	//    '{'
	//        ('distance' distance=EDouble)?
	//    '}';
	public MmElements getMmAccess() {
		return pMm;
	}
	
	public ParserRule getMmRule() {
		return getMmAccess().getRule();
	}
	
	//BooleanType returns BooleanType:
	//    {BooleanType}
	//    (value?='value')?
	//    'BooleanType'
	//    ;
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//NumberType returns NumberType:
	//    {NumberType}
	//    'NumberType'
	//    '{'
	//        ('value' value=EDouble)?
	//    '}';
	public NumberTypeElements getNumberTypeAccess() {
		return pNumberType;
	}
	
	public ParserRule getNumberTypeRule() {
		return getNumberTypeAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
